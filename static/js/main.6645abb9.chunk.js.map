{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","memo","name","value","isValid","label","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","onAdd","count","setCount","setTitle","setDescription","setimgUrl","setimdbUrl","setImdbId","hasTitleError","setTitleError","hasDescriptionError","setDescriptionError","hasImgUrlError","setImgUrlError","hasImdbUrlError","setImdbUrlError","hasImdbIDError","setImdbIdError","isMovieValid","Boolean","handleTitleChange","useCallback","handleTitleBlur","handleDescription","handleimgUrlChange","handleImgUrlBlur","handleimdbUrlChange","handleImdbUrlBlur","handleImbdIdChange","handleImdbIdBlur","action","method","onSubmit","e","preventDefault","disabled","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6645abb9.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { ChangeEvent, memo, useState } from 'react';\n\ntype Props = {\n  id?: number,\n  name: string,\n  value: string,\n  label?: string,\n  isValid?: boolean,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  onBlur?: (event: ChangeEvent<HTMLInputElement>)=> void;\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = memo(({\n  name,\n  value,\n  isValid,\n  label = name,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n      {isValid && (\n        <p className=\"FormInput__error\">\n          {`${name} is not valid!`}\n        </p>\n      )}\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n});\n","import {\n  FC, FormEvent, useCallback, useState,\n} from 'react';\nimport { Movie } from '../../types/Movie';\nimport { TextField } from '../TextField';\n\ninterface Props {\n  onAdd: (movie: Movie) => void;\n}\n\nexport const NewMovie: FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setimgUrl] = useState('');\n  const [imdbUrl, setimdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const [hasTitleError, setTitleError] = useState(false);\n  const [hasDescriptionError, setDescriptionError] = useState(false);\n  const [hasImgUrlError, setImgUrlError] = useState(false);\n  const [hasImdbUrlError, setImdbUrlError] = useState(false);\n  const [hasImdbIDError, setImdbIdError] = useState(false);\n\n  const isMovieValid = Boolean(title)\n    && Boolean(imdbId)\n    && (imgUrl)\n    && (imdbUrl);\n\n  const clearForm = () => {\n    setTitle('');\n    setDescription('');\n    setimgUrl('');\n    setimdbUrl('');\n    setImdbId('');\n  };\n\n  const handleTitleChange = useCallback((event) => {\n    setTitle(event);\n    setTitleError(false);\n  }, []);\n\n  const handleTitleBlur = useCallback(({ target }) => {\n    if (!target.value) {\n      setTitleError(true);\n    }\n  }, []);\n\n  const handleDescription = useCallback((event) => {\n    setDescriptionError(false);\n    setDescription(event);\n  }, []);\n\n  const handleimgUrlChange = useCallback((event) => {\n    setImgUrlError(false);\n    setimgUrl(event);\n  }, []);\n\n  const handleImgUrlBlur = useCallback(({ target }) => {\n    if (!(target.value)) {\n      setImgUrlError(true);\n    }\n  }, []);\n\n  const handleimdbUrlChange = useCallback((event) => {\n    setImdbUrlError(false);\n    setimdbUrl(event);\n  }, []);\n\n  const handleImdbUrlBlur = useCallback(({ target }) => {\n    if (!(target.value)) {\n      setImdbUrlError(true);\n    }\n  }, []);\n\n  const handleImbdIdChange = useCallback((event) => {\n    setImdbId(event);\n  }, []);\n\n  const handleImdbIdBlur = useCallback(({ target }) => {\n    if (!target.value) {\n      setImdbIdError(true);\n    }\n  }, []);\n\n  const handleFormSubmission = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    // if (isMovieValid) {\n    onAdd({\n      title, description, imgUrl, imdbUrl, imdbId,\n    });\n\n    clearForm();\n    setCount(count + 1);\n    // }\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      action=\"#\"\n      method=\"post\"\n      onSubmit={handleFormSubmission}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        id={count}\n        name=\"title\"\n        label=\"Title\"\n        data-cy={title}\n        isValid={hasTitleError}\n        value={title}\n        onChange={handleTitleChange}\n        onBlur={handleTitleBlur}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        isValid={hasDescriptionError}\n        value={description}\n        data-cy={description}\n        onChange={handleDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        isValid={hasImgUrlError}\n        value={imgUrl}\n        data-cy={imgUrl}\n        onChange={handleimgUrlChange}\n        onBlur={handleImgUrlBlur}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        data-cy={imdbUrl}\n        isValid={hasImdbUrlError}\n        value={imdbUrl}\n        onChange={handleimdbUrlChange}\n        onBlur={handleImdbUrlBlur}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        isValid={hasImdbIDError}\n        value={imdbId}\n        data-cy={imdbId}\n        onChange={handleImbdIdChange}\n        onBlur={handleImdbIdBlur}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isMovieValid}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { FC, useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App: FC = () => {\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n\n  const addMovie = (movie: Movie) => {\n    setMovies([\n      ...movies,\n      movie,\n    ]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}